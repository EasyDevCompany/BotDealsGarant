import os

from utils import keyboards
from SimpleQIWI import *
from utils import sqliter
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hbold
from loguru import logger
from loader import bot
from aiogram.dispatcher.filters.state import State, StatesGroup

new_sql = sqliter.Sqlite(os.path.abspath(os.path.join('bot_garant.db')))


class WaiteSoldMessage(StatesGroup):
    """
    –†–µ–∂–∏–º FSM, —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è ID,
    –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∏
    –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    """
    waite_id = State()
    waite_sold_item = State()
    waite_cost = State()


# @dp.callback_query_handler(text='button17')
async def started_seller(callback_query: types.CallbackQuery):
    """
    –†–µ–∂–∏–º –ø—Ä–æ–¥–∞–≤—Ü–∞,
    –∑–∞–ø—Ä–æ—Å ID –Ω–∞—á–∞–ª–æ —Å–¥–µ–ª–∫–∏
    :param callback_query: types.CallbackQuery
    :return: None
    """
    await callback_query.message.edit_text('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–¥–∞–≤—Ü–∞, —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º —É–∫–∞–∑–∞–Ω–∏—è–º–∏ –±–æ—Ç–∞:')
    await callback_query.message.edit_reply_markup(reply_markup=keyboards.back_main_menu)
    await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ —É –≤–∞—Å –Ω–µ—Ç, —Ç–æ –ø—É—Å–∫–∞–π'
                                        ' –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏—Ç –µ–≥–æ —É –±–æ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–Ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å"'
                                        '\n–î–ª—è –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"')
    await callback_query.answer()
    await WaiteSoldMessage.waite_id.set()


# @dp.message_handler(state=WaiteSoldMessage.waite_id, content_types=types.ContentTypes.TEXT)
async def waite_sold_items(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É,
    –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID
    :param message: types.Message
    :param state: FSMContext
    :return: None
    """
    await state.update_data(id=message.text)
    user_data = await state.get_data()

    if user_data['id'].isdigit() and len(user_data["id"]) <= 10:
        if int(message.text) != int(message.from_user.id):
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å (–≤—Å–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ):', reply_markup=keyboards.cancel_button)
            await WaiteSoldMessage.waite_sold_item.set()
        else:
            await message.answer('ID –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞(–∑–∞–º–µ—Ç—å—Ç–µ ID –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤ –∏ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 —Å–∏–º–≤–æ–ª–æ–≤)')
    else:
        await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–¥–µ–ª–∫—É —Å–∞–º–∏ —Å —Å–æ–±–æ–π!')


# @dp.message_handler(state=WaiteSoldMessage.waite_sold_item, content_types=types.ContentTypes.TEXT)  # –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã
async def waite_cost(message: types.Message, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è,
    –ø–æ–ø—É—Ç–Ω–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
    :param message: types.Message
    :param state: FSMContext
    :return: None
    """
    await state.update_data(item=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–æ–¥–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã'
                         '(–¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ): ', reply_markup=keyboards.cancel_button)
    await WaiteSoldMessage.waite_cost.set()


# @dp.message_handler(state=WaiteSoldMessage.waite_cost, content_types=types.ContentTypes.TEXT)
async def send_all_info_about_offer(message: types.Message, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–µ–¥–µ–Ω–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—é,
    –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ID —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏,
    —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ
    :param message: types.Message
    :param state: FSMContext
    :return None
    """
    person_id = message.from_user.id
    try:

        if message.text.isdigit():
            user_data = await state.get_data()
            history = (f'{hbold("–°–≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏:")}\n'
                       f'1Ô∏è‚É£ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:{user_data["id"]}\n'
                       f'2Ô∏è‚É£–ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:{user_data["item"]}\n'
                       f'3Ô∏è‚É£–¶–µ–Ω–∞ –∑–∞ –≤—Å–µ:{message.text}')
            await message.answer(history, reply_markup=keyboards.keyboard)
            await bot.send_message(user_data["id"], history + f'\n{hbold("–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?")}', reply_markup=keyboards.inline_kb3)
            logger.info(f'{message.from_user.username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–¥–µ–ª–∫—É: {user_data["id"]}, —Ü–µ–Ω–∞: {message.text}, –ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {user_data["item"]}')
            new_sql.add_second_id(person_id, user_data["id"])
            new_sql.add_money(person_id, user_data["id"], message.text)
            counter_1 = new_sql.get_all_information(person_id)
            counter_2 = new_sql.get_all_information(user_data["id"])
            first = int(counter_1[1]) + 1
            second = int(counter_2[1]) + 1
            first_pay = int(counter_1[2]) + int(message.text)
            second_sold = int(counter_2[0]) + int(message.text)
            logger.info(f"{first_pay}--{second_sold} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!")
            new_sql.add_pay(str(second_sold), user_data["id"])
            new_sql.add_sold(str(first_pay), person_id)
            new_sql.add_count(str(first), person_id)
            new_sql.add_count(str(second), user_data["id"])
            new_sql.add_history(history, person_id)
            new_sql.add_history(history, user_data["id"])
            await state.finish()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏!')

    except Exception as exc:
        logger.error(f'–û—à–∏–±–∫–∞: {exc}')
        await message.answer('–î–∞–Ω–Ω—ã–µ –æ ID —É–∫–∞–∑–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è!'
                             ' –ò–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ID –ø–æ–≤—Ç–æ—Ä–Ω–æ.')
        await state.finish()


# @dp.callback_query_handler(text='btn7')
async def callback_no(callback_query: types.CallbackQuery):
    """
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞,
    –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç,
    —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞—Å—Ç–æ—è—â–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    :param callback_query: types.CallbackQuery
    :return: None
    """
    await callback_query.message.edit_reply_markup()
    first_id = callback_query.from_user.id
    await bot.send_message(new_sql.take_second_id(first_id), '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–¥–µ–ª–∫—É. –ü—Ä–∏—á–∏–Ω–∞: –î–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!'
                                                             '\n–û–±—Å—É–¥–∏—Ç–µ —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Å–≤–µ–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏.')


# @dp.callback_query_handler(text='btn6')  # –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞
async def user_pay(callback_query: types.CallbackQuery):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã,
    :param callback_query: types.CallbackQuery
    :return: None
    """
    await callback_query.message.edit_reply_markup()
    await callback_query.message.answer('–§–∏–Ω–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏. –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ –≤—ã—à–µ.\n'
                                        '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:', reply_markup=keyboards.inline_kb4)
    await callback_query.answer()


# @dp.callback_query_handler(text='btn8')  # –ß–µ–ª–æ–≤–µ–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É
async def user_send_money(callback_query: types.CallbackQuery):
    """
    –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞,
    —Ä–∞–±–æ—Ç–∞ —Å QIWI API
    :param callback_query: types.CallbackQuery
    :return: None
    """
    await callback_query.message.edit_reply_markup()
    person_id = callback_query.from_user.id
    token = os.getenv("QIWI_TOKEN")
    phone = os.getenv("PHONE_NUMBER")
    api = QApi(token=token, phone=phone)
    price = new_sql.get_money_for_pay(person_id)
    comment = api.bill(int(price))
    await callback_query.message.answer(f"üíµ–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —É–∫–∞–∑–∞–Ω–Ω—É—é –≤—ã—à–µ.üíµ"
                                        f"\n{hbold('–ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')} {phone} "
                                        f" \n{hbold('–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç:')}\n{comment}"
                                        f"\n\n{hbold('–£ –≤–∞—Å 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.')}")

    api.start()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ QIWI
    start_time = 0
    while True:
        if api.check(comment):
            await callback_query.message.answer('–ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!‚úÖ', reply_markup=keyboards.keyboard)
            await bot.send_message(new_sql.take_second_id(person_id), '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª —Å–¥–µ–ª–∫—É, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ—é —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏!'
                                                                      ' –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∏–∂–µ:', reply_markup=keyboards.inline_kb5)
            logger.info('–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª —Å–¥–µ–ª–∫—É!')
            break
        elif start_time == 300:
            await callback_query.message.answer('–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞...')
            await bot.send_message(new_sql.take_second_id(person_id), '–°–¥–µ–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ–≤–µ–ª –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç.')
            logger.info('–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
            break
        start_time += 1
        time.sleep(1)
    api.stop()


# @dp.callback_query_handler(text='btn9')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ñ–µ—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
async def check_offer(callback_query: types.CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ñ–µ—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º,
    –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    :param callback_query: types.CallbackQuery
    :return: None
    """
    await callback_query.message.edit_reply_markup()
    person_id = callback_query.from_user.id
    await bot.send_message(new_sql.take_second_id(person_id), '–ü—Ä–æ–¥–∞–≤–µ—Ü –≤—ã–ø–æ–ª–Ω–∏–ª —Å–≤–æ—é —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏,'
                                                              ' –∫–∞–∫ –º–æ–∂–Ω–æ —Ç—â–∞—Ç–µ–ª—å–Ω–µ–µ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–¥–µ–ª–∫—É',
                           reply_markup=keyboards.inline_kb6)


# @dp.callback_query_handler(text='btn10')  # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–∏
async def get_money(callback_query: types.CallbackQuery):
    """
    –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥,
    –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    :param callback_query: types.CallbackQuery
    :return: None
    """
    person_is = callback_query.from_user.id
    await callback_query.message.edit_reply_markup()
    await bot.send_message(new_sql.take_second_id(person_is), '–°–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏!', reply_markup=keyboards.inline_kb7)
    logger.info('–ü—Ä–µ–¥–º–µ—Ç  –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –ø–æ–ª—É—á–µ–Ω—ã')


class TakeMoney(StatesGroup):
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    waite_number = State()


# @dp.callback_query_handler(text='btn11')  # –ü—Ä–∏–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def get_phone_number(callback_query: types.CallbackQuery):
    """
    –ü—Ä–∏–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    :param callback_query: types.CallbackQuery
    :return: None
    """
    await callback_query.message.edit_reply_markup()
    await callback_query.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')

    await TakeMoney.waite_number.set()


# @dp.message_handler(state=TakeMoney.waite_number, content_types=types.ContentTypes.TEXT)
async def send_users_money(message: types.Message, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–Ω–µ–≥ –ø—Ä–æ–¥–∞–≤—Ü—É,
    —Ä–∞–±–æ—Ç–∞ —Å QIWI API
    :param message: types.Message
    :param state: FSMContext
    :return: None
    """
    first_id = message.from_user.id
    token = os.getenv("QIWI_TOKEN")
    phone = os.getenv("PHONE_NUMBER")
    money = new_sql.get_money_for_pay(first_id)  # –î–æ—Å—Ç–∞–µ–º —Å—É–º–º—É –∏–∑ –±–¥, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await state.update_data(number=message.text)
    try:
        if message.text.isdigit():                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
            user_data = await state.get_data()
            api = QApi(token=token, phone=phone)
            print(*api.balance)

            api.pay(account=user_data['number'], amount=money)  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
            await message.answer('–û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞!', reply_markup=keyboards.inline_kb8)
            await bot.send_message(new_sql.take_second_id(first_id), '–°–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=keyboards.inline_kb8)
            await state.finish()
            logger.info(f'–û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞!--{message.from_user.id}, {message.from_user.username}')
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–∏—Ñ—Ä–∞–º–∏!')
    except Exception as exc:
        logger.error(f'–û—à–∏–±–∫–∞: {exc}')
        await message.answer('–û—à–∏–±–∫–∞, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞!')


async def cancel_button(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏, —á–µ—Ä–µ–∑
    –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    :param  callback_query: types.CallbackQuery
    :param state: FSMContext
    :return: None
    """
    await state.finish()
    await callback_query.message.answer('–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞...')
    await callback_query.message.edit_reply_markup()


def register_seller_handlers(dispatcher: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    :param dispatcher: Dispatcher
    :return: None
    """
    dispatcher.register_callback_query_handler(started_seller, text='button17')
    dispatcher.register_message_handler(waite_sold_items, state=WaiteSoldMessage.waite_id, content_types=types.ContentTypes.TEXT)
    dispatcher.register_message_handler(waite_cost, state=WaiteSoldMessage.waite_sold_item, content_types=types.ContentTypes.TEXT)
    dispatcher.register_message_handler(send_all_info_about_offer, state=WaiteSoldMessage.waite_cost, content_types=types.ContentTypes.TEXT)
    dispatcher.register_callback_query_handler(user_pay, text='btn6')
    dispatcher.register_callback_query_handler(user_send_money, text='btn8')
    dispatcher.register_callback_query_handler(callback_no, text='btn7')
    dispatcher.register_callback_query_handler(check_offer, text='btn9')
    dispatcher.register_callback_query_handler(get_money, text='btn10')
    dispatcher.register_callback_query_handler(get_phone_number, text='btn11')
    dispatcher.register_message_handler(send_users_money, state=TakeMoney.waite_number, content_types=types.ContentTypes.TEXT)
    dispatcher.register_callback_query_handler(cancel_button, text='cancel', state='*')